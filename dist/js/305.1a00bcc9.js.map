{"version":3,"file":"js/305.1a00bcc9.js","mappings":"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","sources":["webpack://saltmate-app/./src/views/LoginPage.vue","webpack://saltmate-app/./src/views/LoginPage.vue?fce3"],"sourcesContent":["<template>\n  <div class=\"login-page\">\n    <div class=\"login-container\">\n      <h2>솔트메이트 로그인</h2>\n      <form @submit.prevent=\"handleLogin\">\n        <div class=\"form-group\">\n          <label for=\"email\">이메일</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            v-model=\"email\"\n            placeholder=\"이메일 주소 입력\"\n            required\n            autocomplete=\"email\"\n          />\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"password\">비밀번호</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            v-model=\"password\"\n            placeholder=\"비밀번호\"\n            required\n            autocomplete=\"current-password\"\n          />\n        </div>\n\n        <button type=\"submit\" :disabled=\"loading\" class=\"login-button\">\n          <span v-if=\"loading\">로그인 중...</span>\n          <span v-else>로그인</span>\n        </button>\n      </form>\n\n      <p v-if=\"error\" class=\"error-message\">{{ error }}</p>\n\n      <div class=\"links\">\n        <p>\n          계정이 없으신가요? <router-link to=\"/signup\">회원가입</router-link>\n        </p>\n        <p><router-link to=\"/reset-password\">비밀번호 찾기</router-link></p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { auth, db } from \"@/firebaseConfig\";\nimport {\n  signInWithEmailAndPassword,\n  GoogleAuthProvider,\n  signInWithPopup,\n} from \"firebase/auth\";\nimport { doc, setDoc, getDoc, Timestamp } from \"firebase/firestore\"; // getDoc 임포트\n\nexport default {\n  name: \"LoginPage\", // 컴포넌트 이름 변경\n  setup() {\n    const router = useRouter();\n    const email = ref(\"\");\n    const password = ref(\"\");\n    const loading = ref(false);\n    const error = ref(null);\n\n    const handleLogin = async () => {\n      loading.value = true;\n      error.value = null; // 이전 오류 메시지 초기화\n\n      try {\n        await signInWithEmailAndPassword(auth, email.value, password.value);\n        alert(\"로그인 성공!\");\n        router.push(\"/dashboard\"); // 로그인 성공 후 대시보드로 이동\n      } catch (err) {\n        console.error(\"로그인 오류:\", err.code, err.message);\n        error.value = getAuthErrorMessage(err.code);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    const signInWithGoogle = async () => {\n      loading.value = true;\n      error.value = null;\n      try {\n        const provider = new GoogleAuthProvider();\n        const result = await signInWithPopup(auth, provider);\n        const user = result.user;\n\n        // 사용자가 이미 Firestore에 등록되어 있는지 확인\n        const userDocRef = doc(db, \"users\", user.uid);\n        const userDocSnap = await getDoc(userDocRef);\n\n        if (!userDocSnap.exists()) {\n          // 새로운 Google 사용자라면 Firestore에 정보 저장\n          await setDoc(userDocRef, {\n            email: user.email,\n            name: user.displayName || \"\", // Google 프로필 이름 사용\n            phone: \"\", // Google은 전화번호를 제공하지 않을 수 있음\n            accountNumber: \"\",\n            investmentType: \"individual\", // 소셜 로그인은 기본적으로 개인 투자\n            isApproved: false,\n            createdAt: Timestamp.now(),\n            participationAmount: 0,\n            hasNFT: false,\n            saltmateLevel: \"basic\",\n          });\n          alert(\n            \"Google 계정으로 회원가입 성공! 관리자 승인 후 서비스 이용이 가능합니다.\"\n          );\n        } else {\n          alert(\"Google 계정으로 로그인 성공!\");\n        }\n        router.push(\"/dashboard\"); // 로그인 성공 후 대시보드로 이동\n      } catch (err) {\n        console.error(\"Google 로그인 오류:\", err.code, err.message);\n        error.value = getAuthErrorMessage(err.code);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    const getAuthErrorMessage = (code) => {\n      switch (code) {\n        case \"auth/invalid-email\":\n          return \"유효하지 않은 이메일 주소입니다.\";\n        case \"auth/user-not-found\":\n          return \"등록되지 않은 이메일입니다.\";\n        case \"auth/wrong-password\":\n          return \"비밀번호가 올바르지 않습니다.\";\n        case \"auth/too-many-requests\":\n          return \"로그인 시도 횟수가 너무 많습니다. 잠시 후 다시 시도해 주세요.\";\n        case \"auth/popup-closed-by-user\":\n          return \"Google 로그인 팝업이 사용자에게 의해 닫혔습니다.\";\n        default:\n          return \"로그인 중 알 수 없는 오류가 발생했습니다. 다시 시도해주세요.\";\n      }\n    };\n\n    return {\n      email,\n      password,\n      loading,\n      error,\n      handleLogin,\n      signInWithGoogle,\n    };\n  },\n};\n</script>\n\n<style scoped>\n/* 이전 스타일은 그대로 유지됩니다 */\n.login-page {\n  font-family: \"Noto Sans KR\", sans-serif; /* 이 줄을 추가하세요! */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background-color: #f0f2f5;\n  padding: 20px;\n  box-sizing: border-box;\n}\n\n.login-container {\n  background-color: #ffffff;\n  padding: 40px;\n  border-radius: 10px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  max-width: 400px;\n  text-align: center;\n}\n\nh2 {\n  color: #3498db;\n  margin-bottom: 30px;\n  font-size: 2em;\n}\n\n.form-group {\n  margin-bottom: 20px;\n  text-align: left;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 8px;\n  color: #34495e;\n  font-weight: bold;\n}\n\n.form-group input {\n  width: calc(100% - 20px);\n  padding: 12px 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  font-size: 1em;\n  box-sizing: border-box; /* 패딩이 너비에 포함되도록 */\n}\n\n.form-group input:focus {\n  border-color: #3498db;\n  outline: none;\n  box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);\n}\n\n.login-button {\n  background-color: #3498db;\n  color: white;\n  padding: 12px 20px;\n  border: none;\n  border-radius: 5px;\n  font-size: 1.1em;\n  font-weight: bold;\n  cursor: pointer;\n  width: 100%;\n  transition: background-color 0.3s ease, box-shadow 0.3s ease;\n  margin-top: 10px;\n}\n\n.login-button:hover:not(:disabled) {\n  background-color: #2980b9;\n  box-shadow: 0 6px 15px rgba(52, 152, 219, 0.3);\n}\n\n.login-button:disabled {\n  background-color: #aed6b8; /* 비활성화 시 연한 색 */\n  cursor: not-allowed;\n}\n\n.error-message {\n  color: #e74c3c;\n  margin-top: 20px;\n  font-size: 0.9em;\n  font-weight: 500;\n}\n\n.links {\n  margin-top: 25px;\n  font-size: 0.9em;\n  color: #666;\n}\n\n.links p {\n  margin-bottom: 10px;\n}\n\n.links a {\n  color: #3498db;\n  text-decoration: none;\n  font-weight: bold;\n}\n\n.links a:hover {\n  text-decoration: underline;\n}\n\n/* 반응형 디자인 */\n@media (max-width: 600px) {\n  .login-container {\n    padding: 30px 20px;\n    margin: 15px;\n  }\n  h2 {\n    font-size: 1.8em;\n  }\n  .form-group input,\n  .login-button {\n    font-size: 0.95em;\n    padding: 10px;\n  }\n}\n</style>\n","import { render } from \"./LoginPage.vue?vue&type=template&id=01436e5e&scoped=true\"\nimport script from \"./LoginPage.vue?vue&type=script&lang=js\"\nexport * from \"./LoginPage.vue?vue&type=script&lang=js\"\n\nimport \"./LoginPage.vue?vue&type=style&index=0&id=01436e5e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-01436e5e\"]])\n\nexport default __exports__"],"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","onSubmit","_cache","_withModifiers","args","$setup","handleLogin","_hoisted_3","for","type","id","email","$event","placeholder","required","autocomplete","_hoisted_4","password","disabled","loading","_hoisted_6","_hoisted_7","error","_hoisted_8","_toDisplayString","_hoisted_9","_createVNode","_component_router_link","to","name","setup","router","useRouter","ref","async","value","signInWithEmailAndPassword","auth","alert","push","err","console","code","message","getAuthErrorMessage","signInWithGoogle","provider","GoogleAuthProvider","result","signInWithPopup","user","userDocRef","doc","db","uid","userDocSnap","getDoc","exists","setDoc","displayName","phone","accountNumber","investmentType","isApproved","createdAt","Timestamp","now","participationAmount","hasNFT","saltmateLevel","__exports__","render"],"sourceRoot":""}